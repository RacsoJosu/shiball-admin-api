// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  firstName   String?
  lastName    String?
  password    String
  userSecret  String
  birthDate   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Users_Roles Users_Roles[]

  UserProperties        Properties[]  @relation("UserProperties")
  UserCreatedProperties Properties[]  @relation("UserCreatedProperties")
  Reservation           Reservation[]
}

model Role {
  id          BigInt        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  Users_Roles Users_Roles[]
}

model Users_Roles {
  id       BigInt @id @default(autoincrement())
  fkIdUSer String
  fkIdRole BigInt
  user     User   @relation(fields: [fkIdUSer], references: [id])
  role     Role   @relation(fields: [fkIdRole], references: [id])
}

model SeedHistory {
  id           BigInt     @id @default(autoincrement())
  name         String
  status       StatusSeed @default(PENDING)
  excuteDateAt DateTime?
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
}

enum StatusSeed {
  PENDING
  COMPLETED
  FAILED
}

model Properties {
  id          String        @id @default(uuid())
  description String
  capacity    Int?          @default(1)
  fkIdUSer    String
  createdById String?
  type        TypePropertie @default(DWELLING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?

  user          User  @relation("UserProperties", fields: [fkIdUSer], references: [id])
  createdByUser User? @relation("UserCreatedProperties", fields: [createdById], references: [id])

  Vehicles     Vehicles?
  Dwelling     Dwelling?
  PropertyRate PropertyRate[]
}

model Vehicles {
  id          BigInt       @id @default(autoincrement())
  description String
  brand       String
  model       String
  type        TypeVehicles @default(MECHANICAL)
  propertieId String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?

  propiertie Properties @relation(fields: [propertieId], references: [id])
}

model Dwelling {
  id          BigInt    @id @default(autoincrement())
  city        String
  county      String
  address     String
  latitude    Decimal
  longitude   Decimal
  propertieId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  propiertie Properties @relation(fields: [propertieId], references: [id])
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  isFree      Boolean   @map("is_free")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  serviceRates ServiceRate[]
}

enum RateType {
  hour
  day
  month
  quarter
  semester
  year
}

model Rate {
  id        Int       @id @default(autoincrement())
  type      RateType
  price     Decimal
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  propertyRates PropertyRate[]
  serviceRates  ServiceRate[]
}

model PropertyRate {
  id         Int       @id @default(autoincrement())
  propertyId String    @map("fk_id_property")
  rateId     Int       @map("fk_id_rate")
  createdAt  DateTime  @default(now()) @map("created_at")
  createdBy  String    @map("created_by")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  property Properties @relation(fields: [propertyId], references: [id])
  rate     Rate       @relation(fields: [rateId], references: [id])

  reservations Reservation[]
}

model ServiceRate {
  id        Int       @id @default(autoincrement())
  serviceId Int       @map("fk_id_service")
  rateId    Int       @map("fk_id_rate")
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  service Service @relation(fields: [serviceId], references: [id])
  rate    Rate    @relation(fields: [rateId], references: [id])
}

model Reservation {
  id             Int       @id @default(autoincrement())
  userId         String    @map("fk_id_user")
  propertyRateId Int       @map("fk_id_property_rate")
  startDate      DateTime  @map("start_date")
  endDate        DateTime  @map("end_date")
  createdAt      DateTime  @default(now()) @map("created_at")
  createdBy      String    @map("created_by")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  user         User         @relation(fields: [userId], references: [id])
  propertyRate PropertyRate @relation(fields: [propertyRateId], references: [id])
}

enum TypeVehicles {
  MECHANICAL
  AUTOMATIC
}

enum TypePropertie {
  VEHICLE
  DWELLING
}
